---
import MenuLink from '@components/MenuLink.astro'

type RawPage = {
  url: string | undefined
  frontmatter:
    | {
        title: string | undefined
        menutitle: string | undefined
        order: number | undefined
        redirect: string | undefined
        menu: boolean | undefined
      }
    | undefined
}

type Page = {
  url: string
  title: string
  order: number
  target: string
  active: boolean
}

let topLevelPages: Array<Page> = []
let otherPages: Record<string, Array<Page>> = {}

for (let {
  url,
  frontmatter: { title = null, menutitle = null, order = 0, redirect = null, menu = true } = {},
} of await Astro.glob<RawPage>('@pages/**')) {
  if (!menu) continue
  if (!url) continue
  url = url + '/'
  const active = url === Astro.url.pathname
  const page: Page = {
    url,
    title: menutitle || title || url,
    order,
    active,
    target: redirect || url,
  }
  if (url.split('/').length <= 3) topLevelPages.push(page)
  else {
    const parentUrl = url.split('/').slice(0, 2).join('/') + '/'
    if (!otherPages[parentUrl]) otherPages[parentUrl] = [page]
    else otherPages[parentUrl].push(page)
  }
}

// Sort pages by order and then by url
function comparePages(a: Page, b: Page) {
  if (a.order !== b.order) return a.order - b.order
  return a.url.localeCompare(b.url)
}

topLevelPages.sort(comparePages)
for (let pages of Object.values(otherPages)) pages.sort(comparePages)
---

<ul>
  {
    topLevelPages.map((page) => (
      <MenuLink active={page.active} href={page.target}>
        {page.title}
        {otherPages[page.url] && (
          <ul slot="subpages">
            {otherPages[page.url]?.map((subpage) => (
              <MenuLink depth="1" active={subpage.active} href={subpage.target}>
                {subpage.title}
              </MenuLink>
            ))}
          </ul>
        )}
      </MenuLink>
    ))
  }
</ul>
